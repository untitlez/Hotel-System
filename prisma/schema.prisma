generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum UserStatus {
  ACTIVE
  DISABLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  role          UserRole  @default(MEMBER)
  profile       Profile?
  bookings      Booking[]
  emailVerified DateTime?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Review        Review[]

  @@index([createdAt])
  @@index([updatedAt])
}

model Profile {
  userId    String     @id
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String?
  gender    String?
  birthday  DateTime?
  address   String?
  phone     String?
  image     String?
  status    UserStatus @default(ACTIVE)
  updatedAt DateTime   @updatedAt

  @@index([updatedAt])
}

model Room {
  id             String     @id @default(cuid())
  name           String?
  type           String?
  location       String?
  pricePerNight  Int?
  maxGuests      Int?
  roomSize       Int?
  beds           String?
  amenities      String[]
  image          String?
  availableDates DateTime[]
  bookings       Booking[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([type, location])
  @@index([pricePerNight])
  @@index([createdAt])
  @@index([updatedAt])
}

model Booking {
  id           String        @id @default(cuid())
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  room         Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId       String
  statusPaid   BookingStatus
  request      Json?
  checkInDate  DateTime
  checkOutDate DateTime
  createdAt    DateTime      @default(now())

  @@index([userId, checkInDate, checkOutDate])
  @@index([roomId, checkInDate])
  @@index([roomId, checkOutDate])
  @@index([createdAt])
}

model Account {
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Review {
  id     String  @id @default(cuid())
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
  name   String?
  email  String?
  review String

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}
